#!/usr/bin/env bash
# gitbooty managed
set -eo pipefail

log(){ echo "$*" >&2 ; }
die(){ log "$*"; exit 1; }
pkg(){ pacman -S --noconfirm --needed "$@"; }

(
  . /etc/os-release
  [ "$NAME" = "Arch Linux" ] || die "Is this Arch Linux?"
  [ $EUID -eq 0 ] || die "Please execute as superuser."
)

aur=(
  #keybase
  #kbfs
  #radio-cli-bin
  visual-studio-code-bin
)

core=(
  acpi
  base-devel
  bash-completion
  ca-certificates
  curl
  fakeroot # for makepkg
  git
  gnupg
  keyd
  libgcrypt
  lm_sensors
  lsof
  man-db
  openssh
  pinentry
  screen
  sudo
  tk
  usbutils
)

gui=(
  input-leap # kvm (synergy, barrier replacement - deskflow for wayland)
  #discord
  firefox
  flameshot
  gnome-keyring
  mesa
  mesa-demos
  noto-fonts-emoji
  pipewire-jack
  pipewire-pulse
  polkit-gnome
  ttf-croscore
  ttf-nerd-fonts-symbols-mono
  ttf-roboto
  wezterm
  wireplumber # replaces pipewire media session
)

laptop=(
  acpilight # xbacklight
  powertop
  tlp
  x86_energy_perf_policy
)

lang=(
  go
  #julia
  nodejs
  nvm
  python
  rustup
)

util=(
  age
  atuin
  ddcutil
  eza
  github-cli
  gnu-netcat
  inetutils
  jq
  smartmontools
  the_silver_searcher
  vim
  which
  whois
  yq
)

virt=(
  dnsmasq
  docker
  libvirt
)

xorg=(
  dmenu
  dunst
  lxappearance-gtk3 
  picom # xcompmgr replacement
  wmctrl
  xdg-utils
  xorg-apps
  xorg-server
  xorg-xinit
  xorg-xmessage
  xsel
)

xtra=()
postinstall(){
  echo "postinstall not defined for this host"
}

# booty config
enable_multilib=false
bootycfg="/etc/bootystrap"
prompt/cfg(){
  local id="$1"
  local default="$2"
  [ -e "$id" ] || echo "$default" > "$id"
  read -rp "$id? : " -i "$(cat "$id")" -e answer
  echo "$answer" > "$id"

  case "$id:$answer" in
    laptop:1)
      util+=( "${laptop[@]}" )
      echo 1 > wifi
      ;;
    desktop_environment:xmonad)
      gui+=( "${xorg[@]}" xmonad xmonad-contrib )
      aur+=( xsct )
      ;;
    wifi:1)
      util+=( iwd )
      ;;
    host:hartford)
      enable_multilib=true
      gui+=(
        libva              # VA-API base
        intel-media-driver # VA-API NewGen/ARC Driver
        libva-utils        # provides 'vainfo' command
        libvpl             # VPL base
        vpl-gpu-rt         # VPL NewGen/ARC Driver
        vulkan-intel       # Vulkan base
        vulkan-tools       # provides 'vulkaninfo' command
      )
      xtra+=(
        cups               # printing
        ghostscript        # printing / canon LBP6000
        lib32-mesa         # steam
        lib32-systemd      # steam
        lib32-vulkan-intel # steam
        steam              # steam
        ttf-liberation
      )

      aur+=(
        captdriver-git     # printing /  canon LBP6000
      )

      postinstall(){
        local user="$1"

        [ -e "/etc/sysctl.d/80-gamecompatibility.conf" ] || {
          echo "vm.max_map_count = 2147483642" > /etc/sysctl.d/80-gamecompatibility.conf
          sysctl --system
        }

        # configure printing
        systemctl enable --now cups
        usermod -aG lp "$user"

        lpstat -v CanonLBP &>/dev/null || {
          uri=$(lpinfo -v | grep usb://Canon | awk '{print $2}')
          if [ -n "$uri" ]; then
            log "configuring $uri"
            lpadmin -p CanonLBP -m CanonLBP-3010-3018-3050.ppd -v "$uri" -E
          else
            log "failed to find printer, is it plugged in?"
          fi
        }
      }
      ;;
    host:zb14x)
      core+=( sof-firmware )
      ;;
  esac
}
mkdir -p "$bootycfg" && cd "$_"
prompt/cfg "user" "nesta"
prompt/cfg "timezone" "US/Mountain" # /usr/share/zoneinfo/...
prompt/cfg "laptop" 0
prompt/cfg "wifi" 0
prompt/cfg "desktop_environment" "xmonad"
prompt/cfg "host" "$(uname -n)"

# configure pacman.conf
grep -qF "ParallelDownloads =" /etc/pacman.conf || cat << EOF >> /etc/pacman.conf
[options]
ParallelDownloads = 3
EOF
grep -qF "Include = /etc/pacman.d/bootystrap" /etc/pacman.conf || cat << EOF >> /etc/pacman.conf
Include = /etc/pacman.d/bootystrap
EOF

if $enable_multilib; then
  echo -e "[multilib]\nInclude = /etc/pacman.d/mirrorlist" > /etc/pacman.d/bootystrap
else
  echo > /etc/pacman.d/bootystrap
fi

# sync packages and optimize mirrorlist
pkg -y reflector
reflector_flags=(
  --country US
  --protocol https
  --latest 20
  --score 5
  --sort rate
  --save /etc/pacman.d/mirrorlist
)
echo "${reflector_flags[@]}" > /etc/xdg/reflector/reflector.conf
systemctl enable reflector.timer # refresh mirrors weekly

grep -q Reflector /etc/pacman.d/mirrorlist || {
  log "building mirrorlist. please wait while they're rated."
  reflector "${reflector_flags[@]}" --verbose
}

# install packages
pkg "${core[@]}" "${lang[@]}" "${util[@]}" "${virt[@]}" "${gui[@]}" "${xtra[@]}"

# ensure system dotfiles are in place
if [ -e /etc/bootystrap/.keep.system-dotfiles ]; then
  log "gitbooty: system-dotfiles are present, skipping pull"
else
  gitbooty pull || \
  die "failed to pull system dotfiles, ensure http://github.com/briceburg/gitbooty is configured"
fi

# network configuration
systemctl enable --now systemd-resolved.service
ln -sf /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf

# system configuration
ln -sf "/usr/share/zoneinfo/$(cat $bootycfg/timezone)" /etc/localtime
ln -sf /usr/bin/vim /usr/bin/vi
[ "$(cat $bootycfg/wifi)" = "1" ] && systemctl enable --now iwd.service
systemctl enable --now systemd-timesyncd.service
systemctl enable --now keyd.service
#systemctl enable --now docker.service eats battery, look into toggling via tlp + protecting against running containers


# user configuration
user=$(cat $bootycfg/user)
run(){ sudo --login -u "$user" "$@"; }
log "configuring user: $user"
id -u "$user" &>/dev/null || {
  useradd --create-home  "$user"
  passwd "$user"
}
usermod -aG docker,log,libvirt,rfkill,video,uucp,wheel "$user"
run mkdir -p "/home/$user/"{git/AUR,bin,tmp}

[ -d "/home/$user/.gitbooty" ] || {
  log "pulling $user's dotfiles"
  run gitbooty pull || log "failed pulling dotfiles"
}

# allow passwordless makepkg for AUR installations
grep -qF "/usr/bin/pacman" "/etc/sudoers.d/user-$user" 2>/dev/null || cat << EOF >> "/etc/sudoers.d/user-$user"
$user ALL=(ALL:ALL) NOPASSWD: /usr/bin/makepkg
$user ALL=(ALL:ALL) NOPASSWD: /usr/bin/pacman
EOF

# install AUR packages
run /usr/local/bin/aur-install "${aur[@]}"

[ -d "/home/$user/git/keybase-crypt" ] || (
  #run systemctl --user start keybase.service
  #run systemctl --user start kbfs.service
  echo -e '\033[1mKEYBASE STARTED, PLEASE CONTINUE TO SETUP CRYPT\033[0m'
  read -rp "[Enter] to resume..."
)

# post-install
log "post install: $(cat $bootycfg/host)"
postinstall "$user"

log "[OK] Bootstrap Complete"
